name: 'Pull from Lokalise'
description: GitHub action to download translation files from Lokalise TMS to your GitHub repository in the form of a pull request.
author: 'Lokalise Group, Ilya Krukowski'
inputs:
  api_token:
    description: 'API token for Lokalise with read/write permissions'
    required: true
    secret: true
  project_id:
    description: 'Project ID for Lokalise'
    required: true
  base_lang:
    description: 'Base language (e.g., en, fr_FR)'
    required: true
    default: 'en'
  translations_path:
    description: 'Paths to translation files'
    required: true
    default: |
      locales
  file_format:
    description: 'Format of the translation files (e.g., json). Find all supported file formats at https://developers.lokalise.com/reference/api-file-formats'
    required: true
    default: 'json'
  additional_params:
    description: 'Additional parameters for Lokalise CLI on pull. Find all supported options at https://github.com/lokalise/lokalise-cli-2-go/blob/main/docs/lokalise2_file_download.md'
    required: false
    default: ''
  temp_branch_prefix:
    description: 'Prefix for the temp branch to create pull request'
    required: false
    default: 'lok'
  always_pull_base:
    description: 'By default, changes in the base language translation files are ignored. Set this to true to include base language translations in the PR.'
    required: false
    default: false
  max_retries:
    description: 'Maximum number of retries on rate limit errors'
    required: false
    default: 3
  sleep_on_retry:
    description: 'Number of seconds to sleep before retrying'
    required: false
    default: 1
  flat_naming:
    description: 'Use flat naming convention (true/false). If true, expects files like locales/en.json instead of locales/en/file.json'
    required: false
    default: 'false'
permissions:
  contents: write
  pull-requests: write
branding:
  icon: 'download-cloud'
  color: 'orange'

runs:
  using: "composite"
  steps:
    - name: Install Lokalise CLI
      shell: bash
      run: |
        set -e
        chmod +x "${{ github.action_path }}/src/scripts/install_lokalise_cli.sh"
        "${{ github.action_path }}/src/scripts/install_lokalise_cli.sh"

    - name: Pull translation files from Lokalise
      id: pull-files
      shell: bash
      env:
        CLI_ADD_PARAMS: ${{ inputs.additional_params }}
        MAX_RETRIES: ${{ inputs.max_retries }}
        SLEEP_TIME: ${{ inputs.sleep_on_retry }}
        FILE_FORMAT: ${{ inputs.file_format }}
      run: |
        set -e
        chmod +x "${{ github.action_path }}/src/scripts/lokalise_download.sh"

        . "${{ github.action_path }}/src/scripts/lokalise_download.sh"

        download_files "${{ inputs.project_id }}" "${{ inputs.api_token }}"

        if [ $? -ne 0 ]; then
          echo "Error during file download"
          echo "has_changes=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        translations_path="${{ inputs.translations_path }}"
        file_format="${{ inputs.file_format }}"
        base_lang="${{ inputs.base_lang }}"
        always_pull_base="${{ inputs.always_pull_base }}"
        flat_naming="${{ inputs.flat_naming }}"

        paths=()
        while IFS= read -r path; do
          path=$(echo "$path" | xargs)  # Trim whitespace
          if [ -n "$path" ]; then
            paths+=("$path")
          fi
        done <<< "$translations_path"
    
        if [ ${#paths[@]} -eq 0 ]; then
          echo "No translation paths provided."
          echo "has_changes=false" >> $GITHUB_OUTPUT
          exit 0
        fi
    
        echo "DEBUG: Paths to check: ${paths[@]}"

        status_args=()
        for path in "${paths[@]}"; do
          if [[ "$flat_naming" == "true" ]]; then
            # Flat structure: only add files directly in translations path, exclude subdirectories
            status_args+=("$path/*.${file_format}")
          else
            # Folder structure: include files in folders named after each language
            status_args+=("$path/**/*.${file_format}")
          fi
        done

        echo "DEBUG: Git status arguments: ${status_args[@]}"

        # Get modified files
        STATUS_FILES=$(git diff --name-only HEAD -- "${status_args[@]}")
        echo "DEBUG: Modified files detected: $STATUS_FILES"
        
        # Get untracked files
        UNTRACKED_FILES=$(git ls-files --others --exclude-standard -- "${status_args[@]}")
        echo "DEBUG: Untracked files detected: $UNTRACKED_FILES"
    
        # Combine modified and untracked files
        ALL_CHANGED_FILES=$(echo -e "$STATUS_FILES\n$UNTRACKED_FILES" | sort | uniq)
        echo "DEBUG: All changed files before exclusion: $ALL_CHANGED_FILES"
    
        if [[ "$flat_naming" == "true" ]]; then
          exclude_patterns=()
          for path in "${paths[@]}"; do
            if [[ "$always_pull_base" != "true" ]]; then
              # Exclude base language file in flat structure if always_pull_base is false
              exclude_patterns+=("^${path}/${base_lang}\.${file_format}$")
            fi
            # Exclude all files within subdirectories in flat structure, regardless of always_pull_base
            exclude_patterns+=("^${path}/.*/.*$")
          done
          exclude_pattern=$(printf '%s\n' "${exclude_patterns[@]}" | paste -sd'|' -)
          echo "DEBUG: Exclude pattern for flat naming: $exclude_pattern"

          if [ -n "$exclude_pattern" ]; then
            ALL_CHANGED_FILES=$(echo "$ALL_CHANGED_FILES" | grep -Ev "$exclude_pattern" || true)
            echo "DEBUG: All changed files after exclusion: $ALL_CHANGED_FILES"
          fi
        elif [[ "$always_pull_base" != "true" ]]; then
          # Folder structure: exclude base language folder if always_pull_base is false
          exclude_patterns=()
          for path in "${paths[@]}"; do
            exclude_patterns+=("^${path}/${base_lang}/")
          done
          exclude_pattern=$(printf '%s\n' "${exclude_patterns[@]}" | paste -sd'|' -)
          echo "DEBUG: Exclude pattern for folder structure: $exclude_pattern"

          if [ -n "$exclude_pattern" ]; then
            ALL_CHANGED_FILES=$(echo "$ALL_CHANGED_FILES" | grep -Ev "$exclude_pattern" || true)
            echo "DEBUG: All changed files after exclusion: $ALL_CHANGED_FILES"
          fi
        fi
    
        if [[ -z "$ALL_CHANGED_FILES" ]]; then
          echo "No translation file changes detected after pulling from Lokalise"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Translation file changes detected after pulling from Lokalise"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      id: commit-and-push
      if: steps.pull-files.outputs.has_changes == 'true'
      shell: bash
      run: |
        set -e
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

        TIMESTAMP=$(date +%s)
        SHORT_SHA=${GITHUB_SHA::6}
        SAFE_REF_NAME=$(echo "${GITHUB_REF_NAME}" | tr -cd '[:alnum:]_-' | cut -c1-50)
        BRANCH_NAME="${{ inputs.temp_branch_prefix }}_${SAFE_REF_NAME}_${SHORT_SHA}_${TIMESTAMP}"
        BRANCH_NAME=$(echo "$BRANCH_NAME" | tr -cd '[:alnum:]_-' | cut -c1-255)
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

        git checkout -b "$BRANCH_NAME" || git checkout "$BRANCH_NAME"

        translations_path="${{ inputs.translations_path }}"
        file_format="${{ inputs.file_format }}"
        base_lang="${{ inputs.base_lang }}"
        always_pull_base="${{ inputs.always_pull_base }}"
        flat_naming="${{ inputs.flat_naming }}"

        paths=()
        while IFS= read -r path; do
          path=$(echo "$path" | xargs)  # Trim whitespace
          if [ -n "$path" ]; then
            paths+=("$path")
          fi
        done <<< "$translations_path"

        add_args=()
        for path in "${paths[@]}"; do
          if [[ "$flat_naming" == "true" ]]; then
            # Flat structure: add only top-level files, exclude subdirectories
            if [[ "$always_pull_base" == "true" ]]; then
              add_args+=("$path/*.${file_format}")
            else
              add_args+=("$path/*.${file_format}")
              add_args+=(":!$path/$base_lang.${file_format}")
              echo "Excluding base language file: $path/$base_lang.${file_format}"
            fi
            # Exclude all files in subdirectories when flat_naming is true
            add_args+=(":!$path/**/*.${file_format}")
          else
            # Folder structure: include all files in language-named subdirectories
            if [[ "$always_pull_base" == "true" ]]; then
              add_args+=("$path/**/*.${file_format}")
            else
              add_args+=("$path/**/*.${file_format}")
              add_args+=(":!$path/$base_lang/**")
              echo "Excluding base language directory: $path/$base_lang/**"
            fi
          fi
        done

        # Debug output to show which files are about to be added
        echo "Staging files with arguments: ${add_args[@]}"
        git add "${add_args[@]}" --force

        # Commit and push
        if git commit -m 'Translations update'; then
          git push origin "$BRANCH_NAME"
        else
          echo "No changes to commit"
        fi
        
    - name: Create or Update Pull Request
      if: steps.pull-files.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          try {
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: "${{ github.repository_owner }}",
              repo: "${{ github.event.repository.name }}",
              head: "${{ github.repository_owner }}:${{ env.branch_name }}",
              base: "${{ github.ref_name }}",
              state: 'open'
            });

            if (pullRequests.length > 0) {
              console.log(`PR already exists: ${pullRequests[0].html_url}`);
            } else {
              const { data: newPr } = await github.rest.pulls.create({
                owner: "${{ github.repository_owner }}",
                repo: "${{ github.event.repository.name }}",
                title: "Lokalise translations update",
                head: "${{ env.branch_name }}",
                base: "${{ github.ref_name }}",
                body: "This PR updates translations from Lokalise.",
              });
              console.log(`Created new PR: ${newPr.html_url}`);
            }
          } catch (error) {
            core.setFailed(`Failed to create or update pull request: ${error.message}`);
          }